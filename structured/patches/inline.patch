diff --git a/src/Integrator/BDHI/BDHI_FCM.cu b/src/Integrator/BDHI/BDHI_FCM.cu
index 61287b0..4d2e6a1 100644
--- a/src/Integrator/BDHI/BDHI_FCM.cu
+++ b/src/Integrator/BDHI/BDHI_FCM.cu
@@ -4,6 +4,7 @@
 #include"BDHI_FCM.cuh"
 namespace uammd{
   namespace BDHI{
+    inline
     auto FCMIntegrator::computeHydrodynamicDisplacements(){
       auto pos = pd->getPos(access::location::gpu, access::mode::read);
       auto force = pd->getForce(access::location::gpu, access::mode::read);
@@ -15,6 +16,7 @@ namespace uammd{
 						   temperature, 1.0/sqrt(dt), st);
     }
 
+    inline
     void FCMIntegrator::updateInteractors(){
       for(auto forceComp: interactors) forceComp->updateSimulationTime(steps*dt);
       if(steps==1){
@@ -26,6 +28,7 @@ namespace uammd{
       }
     }
 
+    inline
     void FCMIntegrator::resetForces(){
       int numberParticles = pg->getNumberParticles();
       auto force = pd->getForce(access::location::gpu, access::mode::write);
@@ -34,6 +37,7 @@ namespace uammd{
       CudaCheckError();
     }
 
+    inline
     void FCMIntegrator::resetTorques(){
       int numberParticles = pg->getNumberParticles();
       auto torque = pd->getTorque(access::location::gpu, access::mode::write);
@@ -42,6 +46,7 @@ namespace uammd{
       CudaCheckError();
     }
 
+    inline
     void FCMIntegrator::computeCurrentForces(){
       resetForces();
       if (pd->isDirAllocated()) resetTorques();
@@ -56,6 +61,7 @@ namespace uammd{
       /*With all the terms computed, update the positions*/
       /*T=0 case is templated*/
       template<class IndexIterator>
+      inline
       __global__ void integrateEulerMaruyamaD(real4* pos,
 					      real4* dir,
 					      IndexIterator indexIterator,
@@ -75,7 +81,7 @@ namespace uammd{
 	/*Write to global memory*/
 	pos[i] = make_real4(p,c);
 	/*Update the orientation*/
-	if(dir){ 
+	if(dir){
 	  Quat dirc = dir[i];
 	  //printf("W %f %f %f\n", angularV[id].x, angularV[id].y, angularV[id].z);
 	  //printf("V %f %f %f\n", linearV[id].x, linearV[id].y, linearV[id].z);
@@ -86,6 +92,7 @@ namespace uammd{
       }
     }
 
+    inline
     void FCMIntegrator::forwardTime(){
       steps++;
       sys->log<System::DEBUG1>("[BDHI::FCM] Performing integration step %d", steps);
@@ -97,12 +104,12 @@ namespace uammd{
       auto angularVelocities = disp.second;
       auto indexIter = pg->getIndexIterator(access::location::gpu);
       auto pos = pd->getPos(access::location::gpu, access::mode::readwrite);
-      auto dir = pd->getDirIfAllocated(access::location::gpu, access::mode::readwrite);      
+      auto dir = pd->getDirIfAllocated(access::location::gpu, access::mode::readwrite);
       real3* d_linearV = thrust::raw_pointer_cast(linearVelocities.data());
       real3* d_angularV = dir.raw()?thrust::raw_pointer_cast(angularVelocities.data()):nullptr;
       int BLOCKSIZE = 128; /*threads per block*/
       int nthreads = BLOCKSIZE<numberParticles?BLOCKSIZE:numberParticles;
-      int nblocks = numberParticles/nthreads + ((numberParticles%nthreads!=0)?1:0);      
+      int nblocks = numberParticles/nthreads + ((numberParticles%nthreads!=0)?1:0);
       FCM_ns::integrateEulerMaruyamaD<<<nblocks, nthreads, 0, st>>>(pos.raw(),
 								    dir.raw(),
 								    indexIter,
diff --git a/src/Integrator/BDHI/FCM/FCM_impl.cuh b/src/Integrator/BDHI/FCM/FCM_impl.cuh
index 989b0ba..36fd989 100644
--- a/src/Integrator/BDHI/FCM/FCM_impl.cuh
+++ b/src/Integrator/BDHI/FCM/FCM_impl.cuh
@@ -224,6 +224,7 @@ namespace uammd{
       };
 
       template<class IterPos, class IterForce, class Kernel>
+      inline
       cached_vector<real3> spreadForces(IterPos& pos, IterForce& force,
 					int numberParticles,
 					std::shared_ptr<Kernel> kernel,
@@ -248,6 +249,7 @@ namespace uammd{
       };
 
       template<class T, class T3, class Container>
+      inline
       auto getCoordinateVector(Container &v, int coord){
 	cached_vector<T> v_a(v.size());
 	T* ptr= (T*)thrust::raw_pointer_cast(v.data());
@@ -264,7 +266,9 @@ namespace uammd{
 	  return {thrust::get<0>(a), thrust::get<1>(a),thrust::get<2>(a)};
 	}
       };
+
       template<class T3, class Container>
+      inline
       auto interleave(Container &a, Container &b, Container &c){
 	auto zip = thrust::make_zip_iterator(thrust::make_tuple(a.begin(), b.begin(), c.begin()));
 	cached_vector<T3> res(a.size());
@@ -272,6 +276,7 @@ namespace uammd{
 	return res;
       }
 
+      inline
       cached_vector<complex3> forwardTransform(cached_vector<real3>& gridReal,
 						    int3 n,
 						    cufftHandle plan, cudaStream_t st){
@@ -286,6 +291,7 @@ namespace uammd{
       }
 
 
+      inline
       __global__ void addTorqueCurl(complex3 *gridTorquesFourier, complex3* gridVelsFourier, Grid grid){
 	int id = blockDim.x*blockIdx.x + threadIdx.x;
 	const int3 nk = grid.cellDim;
@@ -307,6 +313,7 @@ namespace uammd{
 
 
       template<class IterPos, class IterTorque, class Kernel>
+      inline
       void addSpreadTorquesFourier(IterPos& pos, IterTorque& torque, int numberParticles,
 				   Grid grid,
 				   std::shared_ptr<Kernel> kernel,
@@ -339,6 +346,7 @@ namespace uammd{
 	 Output:gridVels = B·FFTf·S·F -> B \propto (I-k^k/|k|^2)
        */
       /*A thread per fourier node*/
+      inline
       __global__ void forceFourier2Vel(const complex3 * gridForces, /*Input array*/
 				       complex3 * gridVels, /*Output array, can be the same as input*/
 				       real vis,
@@ -361,6 +369,7 @@ namespace uammd{
         gridVels[id] = projectFourier(k2, dk, factor)*(B/real(ncells.x*ncells.y*ncells.z));
       }
 
+      inline
       void convolveFourier(cached_vector<complex3>& gridVelsFourier, real viscosity, Grid grid, cudaStream_t st){
 	System::log<System::DEBUG2>("[BDHI::FCM] Wave space velocity scaling");
 	/*Scale the wave space grid forces, transforming in velocities -> B·FFT·S·F*/
@@ -379,6 +388,7 @@ namespace uammd{
 	This kernel gets v_k = gridVelsFourier = B·FFtt·S·F as input and adds 1/√σ·√B(k)·dWw.
 	Keeping special care that v_k = v*_{N-k}, which implies that dWw_k = dWw*_{N-k}
       */
+      inline
       __global__ void fourierBrownianNoise(complex3 * gridVelsFourier,
 					   Grid grid,
 					   real prefactor,/* sqrt(2·T/dt)*/
@@ -451,6 +461,7 @@ namespace uammd{
 	}
 }
 
+      inline
       void addBrownianNoise(cached_vector<complex3>& gridVelsFourier,
 			    real temperature, real viscosity, real prefactor,
 			    uint seed,
@@ -487,6 +498,7 @@ namespace uammd{
 	}
       }
 
+      inline
       cached_vector<real3> inverseTransform(cached_vector<complex3>& gridFourier,
 					    int3 n, cufftHandle plan, cudaStream_t st){
 	int nx = 2*(n.x/2+1);
@@ -501,6 +513,7 @@ namespace uammd{
       }
 
       template<class IterPos, class Kernel>
+      inline
       cached_vector<real3> interpolateVelocity(IterPos& pos, cached_vector<real3>& gridVels,
 					       Grid grid, std::shared_ptr<Kernel> kernel,
 					       int numberParticles, cudaStream_t st){
@@ -524,6 +537,7 @@ namespace uammd{
       // = 0.5( i*k_y*V_z - i*k_z(V_y), i*k_z(V_x) - i*k_x*V_z, i*k_x*V_y - i*k_y*V_x)
       //Overwrite the output vector with the angular velocities in Fourier space
       //The input velocity vector is overwritten
+      inline
       __global__ void computeVelocityCurlFourier(const complex3 *gridVelsFourier,
 						 complex3* gridAngVelsFourier,
 						 Grid grid){
@@ -549,6 +563,7 @@ namespace uammd{
 	gridAngVelsFourier[id] = gridAng;
       }
 
+      inline
       cached_vector<complex3> computeGridAngularVelocityFourier(cached_vector<complex3>& gridVelsFourier,
 								Grid grid,  cudaStream_t st){
 	const int3 n = grid.cellDim;
@@ -565,6 +580,7 @@ namespace uammd{
       }
 
       template<class IterPos, class Kernel>
+      inline
       cached_vector<real3> interpolateAngularVelocity(IterPos& pos,
 						      cached_vector<real3>& gridAngVels,
 						      Grid grid,
@@ -584,6 +600,7 @@ namespace uammd{
     }
 
     template<class Kernel, class KernelTorque>
+    inline
     std::pair<cached_vector<real3>, cached_vector<real3>>
     FCM_impl<Kernel, KernelTorque>::computeHydrodynamicDisplacements(real4* pos,
 								     real4* force, real4* torque,
diff --git a/src/Integrator/BDHI/FCM/utils.cuh b/src/Integrator/BDHI/FCM/utils.cuh
index c3d628a..00cddd2 100644
--- a/src/Integrator/BDHI/FCM/utils.cuh
+++ b/src/Integrator/BDHI/FCM/utils.cuh
@@ -22,6 +22,7 @@ namespace uammd{
       using complex = cufftComplex_t<real>;
       using complex3 = cufftComplex3_t<real>;
 
+      inline
       __device__ int3 indexToWaveNumber(int i, int3 nk){
 	int ikx = i%(nk.x/2+1);
 	int iky = (i/(nk.x/2+1))%nk.y;
@@ -32,10 +33,12 @@ namespace uammd{
 	return make_int3(ikx, iky, ikz);
       }
 
+      inline
       __device__ real3 waveNumberToWaveVector(int3 ik, real3 L){
 	return (real(2.0)*real(M_PI)/L)*make_real3(ik.x, ik.y, ik.z);
       }
 
+      inline
       __device__ real3 getGradientFourier(int3 ik, int3 nk, real3 L){
 	const bool isUnpairedX = ik.x == (nk.x - ik.x);
 	const bool isUnpairedY = ik.y == (nk.y - ik.y);
@@ -55,6 +58,7 @@ namespace uammd{
 	  unpaired modes set to zero
 	fr is the factor to project
       */
+      inline
       __device__ real3 projectFourier(real k2, real3 dk, real3 fr){
 	const real invk2 = real(1.0)/k2;
 	real3 vr = fr - dk*dot(fr, dk*invk2);
@@ -68,6 +72,7 @@ namespace uammd{
 	  unpaired modes set to zero
 	fr is the factor to project
       */
+      inline
       __device__ complex3 projectFourier(real k2, real3 dk, complex3 factor){
 	real3 re = projectFourier(k2, dk, make_real3(factor.x.x, factor.y.x, factor.z.x));
 	real3 imag = projectFourier(k2, dk, make_real3(factor.x.y, factor.y.y, factor.z.y));
@@ -77,6 +82,7 @@ namespace uammd{
 
       /*Compute gaussian complex noise dW, std = prefactor -> ||z||^2 = <x^2>/sqrt(2)+<y^2>/sqrt(2) = prefactor*/
       /*A complex random number for each direction*/
+      inline
       __device__ complex3 generateNoise(real prefactor, uint id, uint seed1, uint seed2){	  //Uncomment to use uniform numbers instead of gaussian
 	Saru saru(id, seed1, seed2);
 	complex3 noise;
@@ -91,6 +97,7 @@ namespace uammd{
 	return noise;
       }
 
+      inline
       __device__ bool isNyquistWaveNumber(int3 cell, int3 ncells){
 	/*Beware of nyquist points! They only appear with even cell dimensions
 	  There are 8 nyquist points at most (cell=0,0,0 is excluded at the start of the kernel)
diff --git a/src/Integrator/VerletNVE.cu b/src/Integrator/VerletNVE.cu
index 8689e60..698eb7f 100644
--- a/src/Integrator/VerletNVE.cu
+++ b/src/Integrator/VerletNVE.cu
@@ -30,6 +30,7 @@
 
 namespace uammd{
 
+  inline
   VerletNVE::VerletNVE(shared_ptr<ParticleGroup> pg, VerletNVE::Parameters par):
     Integrator(pg, "VerletNVE"),
     dt(par.dt), energy(par.energy), is2D(par.is2D),
@@ -56,6 +57,7 @@ namespace uammd{
     CudaSafeCall(cudaStreamCreate(&stream));
   }
 
+  inline
   VerletNVE::~VerletNVE(){
     cudaStreamDestroy(stream);
   }
@@ -88,6 +90,7 @@ namespace uammd{
       }
   }
 
+  inline
   void VerletNVE::initializeVelocities(){
     //In the first step, compute energy in the system
     //in order to adapt the initial kinetic energy to match the input total energy
@@ -131,6 +134,7 @@ namespace uammd{
   }
 
   template<int step>
+  inline
   void VerletNVE::callIntegrate(){
     int numberParticles = pg->getNumberParticles();
     int Nthreads = 128;
@@ -152,6 +156,7 @@ namespace uammd{
 								       numberParticles, dt, is2D);
   }
 
+  inline
   void VerletNVE::resetForces(){
     int numberParticles = pg->getNumberParticles();
     auto force = pd->getForce(access::location::gpu, access::mode::write);
@@ -159,6 +164,7 @@ namespace uammd{
     thrust::fill(thrust::cuda::par.on(stream), force_gr, force_gr + numberParticles, real4());
   }
 
+  inline
   void VerletNVE::firstStepPreparation(){
     if(initVelocities){
       initializeVelocities();
@@ -173,6 +179,7 @@ namespace uammd{
   }
 
   //Move the particles in my group 1 dt in time.
+  inline
   void VerletNVE::forwardTime(){
     steps++;
     sys->log<System::DEBUG1>("[VerletNVE] Performing integration step %d", steps);
@@ -191,6 +198,7 @@ namespace uammd{
 
   namespace verletnve_ns{
     template<class VelocityIterator, class MassIterator, class EnergyIterator>
+    inline
     __global__ void sumKineticEnergy(const VelocityIterator vel,
 				     EnergyIterator energy,
 				     const MassIterator mass,
@@ -203,6 +211,7 @@ namespace uammd{
   };
 
 
+  inline
   real VerletNVE::sumEnergy(){
     int numberParticles = pg->getNumberParticles();
     auto vel_gr = pg->getPropertyIterator(pd->getVel(access::location::gpu, access::mode::read));
diff --git a/src/Interactor/NeighbourList/BasicList/BasicListBase.cuh b/src/Interactor/NeighbourList/BasicList/BasicListBase.cuh
index 568213a..71e6426 100644
--- a/src/Interactor/NeighbourList/BasicList/BasicListBase.cuh
+++ b/src/Interactor/NeighbourList/BasicList/BasicListBase.cuh
@@ -34,6 +34,7 @@ This class maintains a CellList and uses it to generate a neighbour list. It sho
 
 namespace uammd{
   namespace BasicNeighbourList_ns{
+    inline
     __global__ void fillBasicNeighbourList(CellList_ns::NeighbourContainer ni,
 			      int *neighbourList, int* numberNeighbours,
 			      int maxNeighboursPerParticle,
diff --git a/src/Interactor/Potential/DPD.cuh b/src/Interactor/Potential/DPD.cuh
index 6a8f544..7860ec7 100644
--- a/src/Interactor/Potential/DPD.cuh
+++ b/src/Interactor/Potential/DPD.cuh
@@ -168,11 +168,13 @@ namespace uammd{
     };
 
     template<>
+    inline
     void DPD_impl<DefaultDissipation>::printGamma(){
       System::log<System::MESSAGE>("[Potential::DPD] gamma: %f", gamma.gamma);
     }
 
     template<class T>
+    inline
     void DPD_impl<T>::printGamma(){
       System::log<System::MESSAGE>("[Potential::DPD] Using %s for dissipation", type_name<T>().c_str());
     }
diff --git a/src/ParticleData/ParticleData.cuh b/src/ParticleData/ParticleData.cuh
index 2bbe2cc..33630fe 100644
--- a/src/ParticleData/ParticleData.cuh
+++ b/src/ParticleData/ParticleData.cuh
@@ -316,7 +316,7 @@ namespace uammd{
 #define INIT_PROPERTIES_T(NAME, name) ,  name(BOOST_PP_STRINGIZE(NAME), sys)
 #define INIT_PROPERTIES(r,data, tuple) INIT_PROPERTIES_T(PROPNAME_CAPS(tuple), PROPNAME(tuple))
 
-  ParticleData::ParticleData(int numberParticles, shared_ptr<System> sys):
+  inline ParticleData::ParticleData(int numberParticles, shared_ptr<System> sys):
     numberParticles(numberParticles),
     originalOrderIndexCPUNeedsUpdate(true),
     sys(sys)
@@ -334,7 +334,7 @@ namespace uammd{
   }
 
   //Sort the particles to improve data locality
-  void ParticleData::sortParticles(cudaStream_t st=0){
+  inline void ParticleData::sortParticles(cudaStream_t st=0){
     sys->log<System::DEBUG>("[ParticleData] Sorting particles...");
 
     {
@@ -364,7 +364,7 @@ namespace uammd{
 
 
 
-  void ParticleData::changeNumParticles(int Nnew){
+  inline void ParticleData::changeNumParticles(int Nnew){
     sys->log<System::CRITICAL>("[ParticleData] CHANGE PARTICLES FUNCTIONALITY NOT IMPLEMENTED YET!!!");
     sys->log<System::DEBUG>("[ParticleData] Adding/Removing particles...");
     this->numberParticles = Nnew;
diff --git a/src/ParticleData/ParticleGroup.cuh b/src/ParticleData/ParticleGroup.cuh
index 0318a69..689aede 100644
--- a/src/ParticleData/ParticleGroup.cuh
+++ b/src/ParticleData/ParticleGroup.cuh
@@ -135,7 +135,7 @@ namespace uammd{
 
   namespace ParticleGroup_ns{
     //Updates the indices of the particles in a group using pd->getIdOrderedIndices()
-    __global__ void updateGroupIndices(//An array that stores the indices of the particles in the group per id.
+    __forceinline__ __global__ void updateGroupIndices(//An array that stores the indices of the particles in the group per id.
 				       const int * __restrict__ id2index,
 				       //Out: the current ParticleData indices of the particles in the group
 				       int * __restrict__ particlesIndices,
@@ -372,7 +372,7 @@ namespace uammd{
   };
 
   template<class ParticleSelector>
-  ParticleGroup::ParticleGroup(ParticleSelector selector,
+  inline ParticleGroup::ParticleGroup(ParticleSelector selector,
 			       std::shared_ptr<ParticleData> pd, std::string name):
     pd(pd), sys(pd->getSystem()), name(name){
     sys->log<System::MESSAGE>("[ParticleGroup] Group %s created with selector %s",
@@ -398,7 +398,7 @@ namespace uammd{
 
   //Specialization of a particle group with an All selector
   template<>
-  ParticleGroup::ParticleGroup(particle_selector::All selector,
+  inline ParticleGroup::ParticleGroup(particle_selector::All selector,
 			       std::shared_ptr<ParticleData> pd,
 			       std::string name):
     pd(pd), sys(pd->getSystem()), name(name){
@@ -411,13 +411,13 @@ namespace uammd{
 			      name.c_str(), numberParticles);
   }
 
-  ParticleGroup::ParticleGroup(std::shared_ptr<ParticleData> pd,
+  inline ParticleGroup::ParticleGroup(std::shared_ptr<ParticleData> pd,
 			       std::string name):
     ParticleGroup(particle_selector::All(), pd, name){}
 
   //Specialization of an empty particle group
   template<>
-  ParticleGroup::ParticleGroup(particle_selector::None selector,
+  inline ParticleGroup::ParticleGroup(particle_selector::None selector,
 			       std::shared_ptr<ParticleData> pd,
 			       std::string name):
     pd(pd), sys(pd->getSystem()), name(name){
@@ -430,7 +430,7 @@ namespace uammd{
 
   //Constructor of ParticleGroup when an ID list is provided
   template<class InputIterator>
-  ParticleGroup::ParticleGroup(InputIterator begin, InputIterator end,
+  inline ParticleGroup::ParticleGroup(InputIterator begin, InputIterator end,
 			       std::shared_ptr<ParticleData> pd,
 			       std::string name):
     pd(pd), sys(pd->getSystem()), name(name){
@@ -455,7 +455,7 @@ namespace uammd{
 
   //This is trivial with  pd->getIdOrderedIndices()!
   //Handle a reordering of the particles (which invalids the previous relation between IDs and indices)
-  void ParticleGroup::computeIndexList(bool forceUpdate){
+  inline void ParticleGroup::computeIndexList(bool forceUpdate){
     if(numberParticles==0) return;
     if(this->needsIndexListUpdate || forceUpdate){//Update only if needed
       sys->log<System::DEBUG>("[ParticleGroup] Updating group %s after last particle sorting", name.c_str());
@@ -474,7 +474,7 @@ namespace uammd{
     }
   }
   //Add particles to the group via an array with ids
-  void ParticleGroup::addParticlesById(access::location loc, const int *ids, int N){
+  inline void ParticleGroup::addParticlesById(access::location loc, const int *ids, int N){
     sys->log<System::DEBUG1>("[ParticleGroup] Adding %d particles to group %s via ids!", N, name.c_str());
     int numberParticlesPrev = numberParticles;
     numberParticles += N;
@@ -511,7 +511,8 @@ namespace uammd{
   }
 
   namespace ParticleGroup_ns{
-    __global__  void IdsFromIndices(const int *indices, const int *index2Id, int* groupParticleIds, int N){
+
+    __forceinline__ __global__  void IdsFromIndices(const int *indices, const int *index2Id, int* groupParticleIds, int N){
       int tid = blockIdx.x*blockDim.x + threadIdx.x;
       if(tid>=N) return;
       int index = indices[tid];
@@ -521,7 +522,7 @@ namespace uammd{
 
   }
   //Add particles to the group via an array with the current indices of the particles in pd (faster)
-  void ParticleGroup::addParticlesByCurrentIndex(access::location loc, const int *indices, int N){
+  inline void ParticleGroup::addParticlesByCurrentIndex(access::location loc, const int *indices, int N){
     sys->log<System::DEBUG1>("[ParticleGroup] Adding %d particles to group %s via indices!", N, name.c_str());
     if(N==0) return;
     int numberParticlesPrev = numberParticles;
diff --git a/src/System/Log.h b/src/System/Log.h
index e2cd189..5d9e8f6 100644
--- a/src/System/Log.h
+++ b/src/System/Log.h
@@ -18,7 +18,7 @@ namespace uammd{
     constexpr int maxLogLevel = 6;
 #endif
 
-    ElementType getLogLevelInfo(int level){
+    inline ElementType getLogLevelInfo(int level){
       static const std::map<int, ElementType> printMap{
 	{CRITICAL , std::make_tuple(stderr, "\e[101m[CRITICAL] ", "\e[0m\n")},
 	{ERROR , std::make_tuple(stderr, "\e[91m[ERROR] \e[0m", "\n")},
diff --git a/src/System/System.h b/src/System/System.h
index 4eb7cd8..a10e37c 100644
--- a/src/System/System.h
+++ b/src/System/System.h
@@ -68,8 +68,8 @@ namespace uammd{
     SystemParameters sysPar;
     Timer tim;
 
-    void printWelcome();
-    void printFarewell();
+    inline void printWelcome();
+    inline void printFarewell();
 
     int m_argc = 0;
     char ** m_argv = nullptr;
@@ -202,7 +202,7 @@ namespace uammd{
 
   };
 
-  void System::printWelcome(){
+  inline void System::printWelcome(){
     std::string separator;
     fori(0,60) separator += "━";
     separator += "┓";
@@ -223,7 +223,7 @@ namespace uammd{
     log<System::MESSAGE>("Computation started at %s", std::ctime(&time));
   }
 
-  void System::printFarewell(){
+  inline void System::printFarewell(){
     cudaDeviceSynchronize();
     std::time_t time = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());
     log<System::MESSAGE>("Computation finished at %s",std::ctime(&time));
diff --git a/src/misc/BoundaryValueProblem/BVPMemory.cuh b/src/misc/BoundaryValueProblem/BVPMemory.cuh
index 1fafcdc..d4f4922 100644
--- a/src/misc/BoundaryValueProblem/BVPMemory.cuh
+++ b/src/misc/BoundaryValueProblem/BVPMemory.cuh
@@ -19,7 +19,7 @@ namespace uammd{
     };
 
     namespace detail{
-      size_t computeExtraAlignment(size_t addressOffset, size_t alignment){
+    inline size_t computeExtraAlignment(size_t addressOffset, size_t alignment){
 	size_t extraAlignment = 0;
 	bool isMissAligned = addressOffset%alignment != 0;
 	if(isMissAligned)
@@ -120,4 +120,4 @@ namespace uammd{
 
   }
 }
-#endif
\ No newline at end of file
+#endif
diff --git a/src/misc/IBM_kernels.cuh b/src/misc/IBM_kernels.cuh
index 6565201..acb24ab 100644
--- a/src/misc/IBM_kernels.cuh
+++ b/src/misc/IBM_kernels.cuh
@@ -41,6 +41,7 @@ namespace uammd{
 
       //Sum all values in a container using Kahan Summation, which increases floating point accuracy
       template<class Container>
+      inline
       auto kahanSum(Container &v){
 	auto c = v[0]*0;
 	auto sum = c;
@@ -55,6 +56,7 @@ namespace uammd{
 
       //Integrate the function foo(x) from x=rmin to x=rmax using the Simpson rule with Nr intervals
       template<class Foo>
+      inline
       auto integrate(Foo foo, real rmin, real rmax, int Nr){
 	using T = decltype(foo(rmin));
 	if(Nr%2 == 1) Nr++; //Need an even number of points
@@ -74,6 +76,7 @@ namespace uammd{
     }
 
     //[1] Taken from https://arxiv.org/pdf/1712.04732.pdf
+    inline
     __host__ __device__ real BM(real zz, real alpha, real beta){
       const real z = zz/alpha;
       const real z2 = z*z;
@@ -114,7 +117,7 @@ namespace uammd{
 	const real invh;
 	static constexpr int support = 3;
 	threePoint(real h):invh(1.0/h){}
-	__host__ __device__ real phi(real rr, real3 pos = real3()) const{
+	inline __host__ __device__ real phi(real rr, real3 pos = real3()) const{
 	  const real r = fabs(rr)*invh;
 	  if(r<real(0.5)){
 	    constexpr real onediv3 = real(1/3.0);
diff --git a/src/misc/LanczosAlgorithm/LanczosAlgorithm.cu b/src/misc/LanczosAlgorithm/LanczosAlgorithm.cu
index 015b0d8..fa19851 100644
--- a/src/misc/LanczosAlgorithm/LanczosAlgorithm.cu
+++ b/src/misc/LanczosAlgorithm/LanczosAlgorithm.cu
@@ -193,16 +193,19 @@ namespace uammd{
       };
     }
 
+    inline
     Solver::Solver():
       check_convergence_steps(3){
       //Init cuBLAS for Lanczos process
       CublasSafeCall(cublasCreate_v2(&cublas_handle));
     }
 
+    inline
     Solver::~Solver(){
       CublasSafeCall(cublasDestroy(cublas_handle));
     }
 
+    inline
     real Solver::runIterations(MatrixDot *dot, real *Bz, const real*z, int numberIterations, int N){
       oldBz.resize((N+1), real());
       /*Lanczos iterations for Krylov decomposition*/
@@ -221,6 +224,7 @@ namespace uammd{
       return currentResidual;
     }
 
+    inline
     int Solver::run(MatrixDot *dot, real *Bz, const real*z, real tolerance, int N, cudaStream_t st){
       oldBz.resize((N+1));
       detail::device_fill(oldBz.begin(), oldBz.end(), real());
@@ -247,6 +251,7 @@ namespace uammd{
       throw std::runtime_error("[Lanczos] Could not converge");
     }
 
+    inline
     real Solver::computeError(real *Bz, int N, int iter){
       /*Compute error as in eq 27 in [1]
 	Error = ||Bz_i - Bz_{i-1}||_2 / ||Bz_{i-1}||_2
@@ -272,6 +277,7 @@ namespace uammd{
       return Error;
     }
 
+    inline
     void Solver::registerRequiredStepsForConverge(int steps_needed){
       this->lastRunRequiredSteps = steps_needed;
       if(steps_needed-2 > check_convergence_steps){
diff --git a/src/utils/Grid.cuh b/src/utils/Grid.cuh
index 2b9c0fd..a7c7207 100644
--- a/src/utils/Grid.cuh
+++ b/src/utils/Grid.cuh
@@ -139,7 +139,7 @@ struct Grid {
 
 // Looks for the closest (equal or greater) number of nodes of the form
 // 2^a*3^b*5^c*7^d*11^e
-int3 nextFFTWiseSize3D(int3 size) {
+inline int3 nextFFTWiseSize3D(int3 size) {
   int *cdim = &size.x;
   using integral = uint64_t;
   integral max_dim = std::max({size.x, size.y, size.z});
diff --git a/src/utils/ParticleSorter.cuh b/src/utils/ParticleSorter.cuh
index b50a826..1e96841 100644
--- a/src/utils/ParticleSorter.cuh
+++ b/src/utils/ParticleSorter.cuh
@@ -79,7 +79,7 @@ namespace uammd{
       }
     };
 
-    int clz(uint n){
+    inline int clz(uint n){
       n |= (n >>  1);
       n |= (n >>  2);
       n |= (n >>  4);
diff --git a/src/utils/cublasDebug.h b/src/utils/cublasDebug.h
index 9293087..a50b14e 100644
--- a/src/utils/cublasDebug.h
+++ b/src/utils/cublasDebug.h
@@ -8,7 +8,7 @@
 #define CublasSafeCall(err) __cublasSafeCall(err, __FILE__, __LINE__)
 
 
-
+inline
 const char* cublasGetErrorString(cublasStatus_t status){
   switch(status){
   case CUBLAS_STATUS_SUCCESS: return "CUBLAS_STATUS_SUCCESS";
diff --git a/src/utils/cufftDebug.h b/src/utils/cufftDebug.h
index 07e63ab..3056bb6 100644
--- a/src/utils/cufftDebug.h
+++ b/src/utils/cufftDebug.h
@@ -12,6 +12,7 @@
 #define CufftSafeCall(err) __cufftSafeCall(err, __FILE__, __LINE__)
 
 namespace uammd{
+  inline
   const char* cufftGetErrorString(cufftResult_t err){
     switch (err) {
     case CUFFT_INVALID_PLAN:   return "CUFFT_INVALID_PLAN\n";
diff --git a/src/utils/cufftPrecisionAgnostic.h b/src/utils/cufftPrecisionAgnostic.h
index 953778b..e5b6f6b 100644
--- a/src/utils/cufftPrecisionAgnostic.h
+++ b/src/utils/cufftPrecisionAgnostic.h
@@ -28,14 +28,17 @@ namespace uammd{
   template<> struct CUFFT_Real2Complex<float>{static constexpr cufftType value=CUFFT_R2C;};
 
   template<class prec>
+  inline
   cufftResult cufftExecReal2Complex(cufftHandle &plan, cufftReal_t<prec>* d_in, cufftComplex_t<prec> *d_out);
 
   template<>
+  inline
   cufftResult cufftExecReal2Complex<float>(cufftHandle &plan, cufftReal_t<float>* d_in, cufftComplex_t<float> *d_out){
     return cufftExecR2C(plan, d_in, d_out);
   }
 
   template<>
+  inline
   cufftResult cufftExecReal2Complex<double>(cufftHandle &plan, cufftReal_t<double>* d_in, cufftComplex_t<double> *d_out){
     return cufftExecD2Z(plan, d_in, d_out);
   }
@@ -45,14 +48,17 @@ namespace uammd{
   template<> struct CUFFT_Complex2Real<float>{static constexpr cufftType value=CUFFT_C2R;};
 
   template<class real>
+  inline
   cufftResult cufftExecComplex2Real(cufftHandle &plan, cufftComplex_t<real>* d_in, cufftReal_t<real> *d_out);
 
   template<>
+  inline
   cufftResult cufftExecComplex2Real<float>(cufftHandle &plan, cufftComplex_t<float> *d_in, cufftReal_t<float> *d_out){
     return cufftExecC2R(plan, d_in, d_out);
   }
 
   template<>
+  inline
   cufftResult cufftExecComplex2Real<double>(cufftHandle &plan, cufftComplex_t<double> *d_in, cufftReal_t<double> *d_out){
     return cufftExecZ2D(plan, d_in, d_out);
   }
@@ -62,14 +68,17 @@ namespace uammd{
   template<> struct CUFFT_Complex2Complex<float>{static constexpr cufftType value=CUFFT_C2C;};
 
   template<class real>
+  inline
   cufftResult cufftExecComplex2Complex(cufftHandle &plan, cufftComplex_t<real>* d_in, cufftComplex_t<real> *d_out, int direction);
 
   template<>
+  inline
   cufftResult cufftExecComplex2Complex<float>(cufftHandle &plan, cufftComplex_t<float> *d_in, cufftComplex_t<float> *d_out, int direction){
     return cufftExecC2C(plan, d_in, d_out, direction);
   }
 
   template<>
+  inline
   cufftResult cufftExecComplex2Complex<double>(cufftHandle &plan, cufftComplex_t<double> *d_in, cufftComplex_t<double> *d_out, int direction){
     return cufftExecZ2Z(plan, d_in, d_out, direction);
   }
diff --git a/src/utils/curandDebug.h b/src/utils/curandDebug.h
index 0f3b2b9..567a90c 100644
--- a/src/utils/curandDebug.h
+++ b/src/utils/curandDebug.h
@@ -8,6 +8,7 @@
 
 #define CurandSafeCall(err) __curandSafeCall(err, __FILE__, __LINE__)
 
+inline
 const char* curandGetErrorString(curandStatus_t err){
   switch (err) {
   case CURAND_STATUS_VERSION_MISMATCH:    return "CURAND_STATUS_VERSION_MISMATCH";
diff --git a/src/utils/cxx_utils.h b/src/utils/cxx_utils.h
index 5dbe9a7..a44d2c3 100644
--- a/src/utils/cxx_utils.h
+++ b/src/utils/cxx_utils.h
@@ -27,7 +27,7 @@ namespace uammd{
   }
   namespace printUtils{
     //Transform size in bytes to a pretty string in B, KB, MB...
-    std::string prettySize(size_t size) {
+    inline std::string prettySize(size_t size) {
       static const char *SIZES[] = { "B", "KB", "MB", "GB" };
       uint div = 0;
       size_t rem = 0;
diff --git a/src/utils/exception.h b/src/utils/exception.h
index 5b42453..1c68172 100644
--- a/src/utils/exception.h
+++ b/src/utils/exception.h
@@ -10,7 +10,7 @@
 namespace uammd{
   using exception = std::exception;
 
-  void backtrace_nested_exception(const uammd::exception& e, int level =  0){
+  inline void backtrace_nested_exception(const uammd::exception& e, int level =  0){
 
     Logging::log<Logging::EXCEPTION>(std::string(level,' ') + "level " +
 				     std::to_string(level) + " exception: " + e.what());
