#!/usr/bin/env python
import sys,os

import argparse
from argparse import RawTextHelpFormatter

import logging

####################

debug        = False

####################

# Set up logger

class CustomFormatter(logging.Formatter):

    white = "\x1b[37;20m"
    grey = "\x1b[38;20m"
    yellow = "\x1b[33;20m"
    red = "\x1b[31;20m"
    bold_red = "\x1b[31;1m"
    reset = "\x1b[0m"
    format     = "  %(message)s "
    formatLine = "  %(message)s "

    FORMATS = {
        logging.DEBUG: white + formatLine + reset,
        logging.INFO: grey + format + reset,
        logging.WARNING: yellow + format + reset,
        logging.ERROR: red + formatLine + reset,
        logging.CRITICAL: bold_red + formatLine + reset
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)

logger = logging.getLogger("USCM")
logger.handlers = []
logger.setLevel(logging.DEBUG)

clog = logging.StreamHandler()
if debug:
    clog.setLevel(logging.DEBUG) #<----
else:
    clog.setLevel(logging.INFO) #<----

clog.setFormatter(CustomFormatter())
logger.addHandler(clog)

##############################################################

#Print welcome message

logger.info(f"\n")
logger.info(f"#########################################################")
logger.info(f"Welcome to \"UAMMD Structured Components Manager\" (USCM)")

##############################################################

try:
    UAMMD_STRUCTURED_PATH    = os.getenv('UAMMD_STRUCTURED_PATH')
    UAMMD_STRUCTURED_INCLUDE = os.path.join(UAMMD_STRUCTURED_PATH,"UAMMDstructured.cuh")
except:
    logger.error(f"UAMMD_STRUCTURED_PATH environment variable not found")
    raise Exception(f"UAMMD_STRUCTURED_PATH environment variable not found")

logger.info(f"#########################################################\n")

logger.info(f"UAMMD-structured path: {UAMMD_STRUCTURED_PATH}")

CURRENT_FILE_PATH = os.path.dirname(os.path.realpath(__file__))

COMPONENTS_PATH  = "."
DATA_PATH        = "."
TEMPLATES_PATH   = "./Templates"

COMPONENTS_PATH  = os.path.join(CURRENT_FILE_PATH, COMPONENTS_PATH)
DATA_PATH        = os.path.join(CURRENT_FILE_PATH, DATA_PATH)
TEMPLATES_PATH   = os.path.join(CURRENT_FILE_PATH, TEMPLATES_PATH)

logger.info(f"Components path: {COMPONENTS_PATH}")
logger.info(f"Data path: {DATA_PATH}")
logger.info(f"Templates path: {TEMPLATES_PATH}\n")

logger.info(f"#########################################################\n")

##############

#Create the parser

parser = argparse.ArgumentParser(prog="USCM",
                                 description="UAMMD Structured Components Manager",
                                 formatter_class=RawTextHelpFormatter)

group = parser.add_mutually_exclusive_group(required=True)

#Main arguments
group.add_argument("--list",     nargs=1  ,type=str,
                    help="Two options: components or templates.\n\
Option \"components\" lists all the components available in UAMMD Structured.\n\
Option \"templates\" lists all the templates available in UAMMD Structured.\n")
group.add_argument("--template",   nargs='+',          help="Create a new component template")
group.add_argument("--add",        nargs='+',type=str, help="Add a new component to UAMMD Structured")
group.add_argument("--remove",     nargs='+',type=str, help="Remove a component from UAMMD Structured")
group.add_argument("--path",       nargs='+',type=str, help="Give the path of a component")
group.add_argument("--generate",                     help="Generate all the components", action="store_true")
group.add_argument("--compile",                      help="Compile UAMMD launcher",      action="store_true")
group.add_argument("--upgrade",    nargs=1  ,type=str, help="Upgrade a UAMMD-structured")
group.add_argument("--extensions", nargs=1  ,type=str, help="Add an extension to UAMMD-structured")

#Optional add arguments
parser.add_argument("--file",    nargs=1  ,type=str, help="File to be added to UAMMD Structured (required for --add)")
#Optional template arguments
parser.add_argument("--variant", nargs=1  ,type=str, help="Name of the component to be created (optional for --template)")

#Optional compile arguments
parser.add_argument("--arch",    nargs='+',type=str, help="Cuda architecture (optional for --compile)")
parser.add_argument("--ccbin",   nargs=1  ,type=str, help="C/C++ compiler (optional for --compile)")
parser.add_argument("--mkl",                         help="Use MKL (optional for --compile)",                       action="store_true")
parser.add_argument("--verbose",                     help="Compile in verbose mode (optional for --compile)",       action="store_true")
parser.add_argument("--double",                      help="Compile with double precision (optional for --compile)", action="store_true")
parser.add_argument("--folder",  nargs=1  ,type=str, help="Folder to compile (optional for --compile)")
parser.add_argument("--name",    nargs=1  ,type=str, help="Name of the executable (optional for --compile)")

args = parser.parse_args()

#Check optional arguments
if not args.template:
    if args.variant:
        logger.error(f"Option --variant can only be used with --template")
        raise Exception(f"Not allowed option combination")

if not args.compile:
    if args.arch:
        logger.error(f"Option --arch can only be used with --compile")
        raise Exception(f"Not allowed option combination")
    if args.ccbin:
        logger.error(f"Option --ccbin can only be used with --compile")
        raise Exception(f"Not allowed option combination")
    if args.mkl:
        logger.error(f"Option --mkl can only be used with --compile")
        raise Exception(f"Not allowed option combination")
    if args.verbose:
        logger.error(f"Option --verbose can only be used with --compile")
        raise Exception(f"Not allowed option combination")
    if args.double:
        logger.error(f"Option --double can only be used with --compile")
        raise Exception(f"Not allowed option combination")
    if args.folder:
        logger.error(f"Option --folder can only be used with --compile")
        raise Exception(f"Not allowed option combination")
    if args.name:
        logger.error(f"Option --name can only be used with --compile")
        raise Exception(f"Not allowed option combination")

logger.info(f"#########################################################\n")

##############

if args.list:

    from Options import lst
    lst(args,
        COMPONENTS_PATH,
        DATA_PATH,
        TEMPLATES_PATH)

elif args.template:

    from Options import template
    template(args,
             COMPONENTS_PATH,
             TEMPLATES_PATH)

elif args.add:

    from Options import add
    add(args,
        COMPONENTS_PATH,DATA_PATH,
        UAMMD_STRUCTURED_PATH)

elif args.remove:

    from Options import remove
    remove(args,
           COMPONENTS_PATH,DATA_PATH,
           UAMMD_STRUCTURED_PATH)

elif args.path:

    from Options import path
    path(args,
         COMPONENTS_PATH,
         UAMMD_STRUCTURED_PATH)

elif args.generate:

    from Options import generate
    generate(args,
             COMPONENTS_PATH,DATA_PATH,
             UAMMD_STRUCTURED_PATH,UAMMD_STRUCTURED_INCLUDE)

elif args.compile:

    from Options import generate
    from Options import compile

    generate(args,
             COMPONENTS_PATH,DATA_PATH,
             UAMMD_STRUCTURED_PATH,UAMMD_STRUCTURED_INCLUDE)
    compile(args)

elif args.upgrade:

    from Options import upgrade
    upgrade(args)

    
elif args.extensions:

    from Options import extensions
    extensions(args,
        COMPONENTS_PATH,
        UAMMD_STRUCTURED_PATH)

else:

    parser.print_help()
    sys.exit(1)

logger.info(f"Finishing ...\n")
logger.info(f"#########################################################")
logger.info(f"\n")
